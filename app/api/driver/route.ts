import { NextResponse } from 'next/server';
import axios from 'axios';

export async function POST(req: Request) {
  try {
    const { fullName, phone, licenseCategory, experience } = await req.json();

    const botToken = process.env.TG_BOT_TOKEN;
    const chatId = process.env.TG_CHAT;

    const telegramUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;

    const text = `
üöó **–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è** üöó

üë§ **–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è:** ${fullName}

üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** ${phone}

üìã **–ö–∞—Ç–µ–≥–æ—Ä–∏—è –í–£:** ${licenseCategory}

üîß **–û–ø—ã—Ç –≤–æ–∂–¥–µ–Ω–∏—è:**  
${experience}
`;

    const response = await axios.post(telegramUrl, {
      chat_id: chatId,
      text: text,
      parse_mode: 'Markdown',
    });

    if (response.data.ok) {
      return NextResponse.json(
        { success: true, message: '–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' },
        { status: 200 }
      );
    } else {
      return NextResponse.json(
        { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã.' },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã –≤ Telegram:', error);
    return NextResponse.json(
      { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.' },
      { status: 500 }
    );
  }
}
